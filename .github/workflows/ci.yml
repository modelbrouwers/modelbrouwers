name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: modelbrouwers/brouwers
  DJANGO_SETTINGS_MODULE: brouwers.conf.ci
  DB_PASSWORD: ""
  DB_USER: postgres
  COMPOSE_DOCKER_CLI_BUILD: "1"
  DOCKER_BUILDKIT: "1"
  # pre-installed according to https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md
  SELENIUM_WEBDRIVER: Chrome

jobs:
  tests:
    runs-on: ubuntu-latest

    name: Tests

    services:
      postgres:
        image: docker.io/library/postgres:14
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      memcached:
        image: memcached:1.6
        ports:
          - 11211:11211

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes libmemcached-dev
          pip install uv
          uv pip install --system -r requirements/ci.txt

      - name: Build frontend
        run: |
          npm ci --legacy-peer-deps
          npm run build --production

      - name: Run tests
        run: |
          # codecov can't handle symlinks...
          rm -f src/phpbb/php-static-files/vendor_autoload.php

          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src -v 2

      - name: Publish coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    name: Docker image build

    steps:
      - uses: actions/checkout@v4
      - name: Determine tag/commit hash
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}
          echo ::set-output name=git_hash::${GITHUB_SHA}
      - name: Build the Docker image
        run: |
          docker build \
            --tag $IMAGE_NAME:${{ steps.vars.outputs.tag }} \
            --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
            --build-arg RELEASE=${{ steps.vars.outputs.tag }} \
            .
      - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1
