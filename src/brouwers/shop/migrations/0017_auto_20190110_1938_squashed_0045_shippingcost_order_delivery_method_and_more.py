# Generated by Django 4.2.19 on 2025-04-14 21:43

import django.core.serializers.json
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import autoslug.fields

import brouwers.general.fields
import brouwers.shop.models.orders
import brouwers.shop.models.utils


class Migration(migrations.Migration):

    replaces = [
        ("shop", "0017_auto_20190110_1938"),
        ("shop", "0018_paymentmethod_shopconfiguration"),
        ("shop", "0019_auto_20190524_0918"),
        ("shop", "0020_auto_20190524_0927"),
        ("shop", "0021_payment"),
        ("shop", "0022_auto_20190629_1616"),
        ("shop", "0023_auto_20200426_1617"),
        ("shop", "0024_alter_payment_data"),
        ("shop", "0025_cart_snapshot_data"),
        ("shop", "0026_address_order"),
        ("shop", "0027_alter_paymentmethod_order"),
        ("shop", "0028_alter_order_phone"),
        ("shop", "0029_auto_20220723_1510"),
        ("shop", "0030_auto_20220723_1644"),
        ("shop", "0031_delete_productreview"),
        ("shop", "0032_auto_20221105_2111"),
        ("shop", "0033_auto_20221227_1158"),
        ("shop", "0034_product_active"),
        ("shop", "0035_auto_20221228_1159"),
        ("shop", "0036_auto_20221228_1215"),
        ("shop", "0037_auto_20221228_1512"),
        ("shop", "0038_auto_20221229_1747"),
        ("shop", "0039_auto_20221231_1651"),
        ("shop", "0040_alter_order_reference"),
        ("shop", "0041_auto_20221231_1709"),
        ("shop", "0042_order_language"),
        ("shop", "0043_shopconfiguration_from_email"),
        ("shop", "0044_alter_product_related_products"),
        ("shop", "0045_shippingcost_order_delivery_method_and_more"),
    ]

    dependencies = [
        ("shop", "0001_initial_squashed_0016_auto_20181217_2121"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="cart",
            name="status",
            field=models.CharField(
                choices=[("open", "Open"), ("paid", "Paid")],
                default="open",
                max_length=10,
                verbose_name="status",
            ),
        ),
        migrations.AlterField(
            model_name="cart",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="carts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="cartproduct",
            name="cart",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="products",
                to="shop.cart",
            ),
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, verbose_name="name")),
                (
                    "method",
                    models.CharField(max_length=50, unique=True, verbose_name="method"),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        upload_to="shop/payment_methods/",
                        verbose_name="logo",
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the payment method can be used at checkout or not.",
                        verbose_name="enabled",
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        default=brouwers.shop.models.utils.get_max_order,
                        verbose_name="ordering",
                    ),
                ),
                (
                    "name_de",
                    models.CharField(max_length=50, null=True, verbose_name="name"),
                ),
                (
                    "name_en",
                    models.CharField(max_length=50, null=True, verbose_name="name"),
                ),
                (
                    "name_nl",
                    models.CharField(max_length=50, null=True, verbose_name="name"),
                ),
            ],
            options={
                "verbose_name": "payment method",
                "verbose_name_plural": "payment methods",
            },
        ),
        migrations.AlterField(
            model_name="cart",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="carts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        default=brouwers.shop.models.utils.get_payment_reference,
                        help_text="A unique payment reference",
                        max_length=16,
                        unique=True,
                        verbose_name="reference",
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="Amount to be paid, in eurocents.",
                        verbose_name="amount",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="The exact payment data is provider-specific",
                        verbose_name="payment data",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    models.DateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shop.paymentmethod",
                        verbose_name="Payment method used",
                    ),
                ),
            ],
            options={
                "verbose_name": "payment",
                "verbose_name_plural": "payments",
            },
        ),
        migrations.AddField(
            model_name="cart",
            name="snapshot_data",
            field=models.JSONField(
                encoder=django.core.serializers.json.DjangoJSONEncoder,
                help_text="Snapshot of order information with frozen prices.",
                null=True,
                verbose_name="snapshot data",
            ),
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "street",
                    models.CharField(max_length=255, verbose_name="street name"),
                ),
                (
                    "number",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="house number"
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(max_length=50, verbose_name="postal code"),
                ),
                ("city", models.CharField(max_length=255, verbose_name="city")),
                (
                    "country",
                    brouwers.general.fields.CountryField(
                        choices=[
                            ("N", "The Netherlands"),
                            ("B", "Belgium"),
                            ("D", "Germany"),
                        ],
                        max_length=1,
                        verbose_name="country",
                    ),
                ),
                (
                    "company",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="company"
                    ),
                ),
                (
                    "chamber_of_commerce",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        verbose_name="chamber of commerce number",
                    ),
                ),
            ],
            options={
                "verbose_name": "address",
                "verbose_name_plural": "addresses",
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("received", "Received"),
                            ("processing", "Processing"),
                            ("shipped", "Shipped"),
                            ("cancelled", "Cancelled"),
                        ],
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=255, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="last name"
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="email")),
                (
                    "phone",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="phone number"
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    models.DateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "cart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shop.cart",
                        verbose_name="shopping cart",
                    ),
                ),
                (
                    "delivery_address",
                    models.OneToOneField(
                        help_text="Address for delivery",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="delivery_order",
                        to="shop.address",
                    ),
                ),
                (
                    "invoice_address",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="invoice_order",
                        to="shop.address",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        default="",
                        help_text="A unique order reference",
                        max_length=16,
                        unique=True,
                        verbose_name="reference",
                    ),
                ),
            ],
            options={
                "verbose_name": "order",
                "verbose_name_plural": "orders",
            },
        ),
        migrations.CreateModel(
            name="ShopConfiguration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sisow_test_mode",
                    models.BooleanField(default=False, verbose_name="sisow test mode"),
                ),
                (
                    "sisow_merchant_id",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="sisow merchant ID"
                    ),
                ),
                (
                    "sisow_merchant_key",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="sisow merchant key"
                    ),
                ),
                (
                    "bank_transfer_instructions",
                    models.TextField(
                        default="",
                        help_text="Enter the instructions to display to the customer on how to transfer the money.",
                        verbose_name="instructions",
                    ),
                ),
                (
                    "bank_transfer_instructions_de",
                    models.TextField(
                        help_text="Enter the instructions to display to the customer on how to transfer the money.",
                        null=True,
                        verbose_name="instructions",
                    ),
                ),
                (
                    "bank_transfer_instructions_en",
                    models.TextField(
                        help_text="Enter the instructions to display to the customer on how to transfer the money.",
                        null=True,
                        verbose_name="instructions",
                    ),
                ),
                (
                    "bank_transfer_instructions_nl",
                    models.TextField(
                        help_text="Enter the instructions to display to the customer on how to transfer the money.",
                        null=True,
                        verbose_name="instructions",
                    ),
                ),
                (
                    "paypal_client_id",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="paypal API client ID"
                    ),
                ),
                (
                    "paypal_sandbox",
                    models.BooleanField(default=True, verbose_name="paypal sandbox"),
                ),
                (
                    "paypal_secret",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="paypal API secret"
                    ),
                ),
            ],
            options={
                "verbose_name": "Shop configuration",
            },
        ),
        migrations.AlterField(
            model_name="cart",
            name="status",
            field=models.CharField(
                choices=[
                    ("open", "Open"),
                    ("payment_pending", "Payment pending"),
                    ("paid", "Paid"),
                ],
                default="open",
                max_length=50,
                verbose_name="status",
            ),
        ),
        migrations.DeleteModel(
            name="ProductReview",
        ),
        migrations.RemoveField(
            model_name="product",
            name="brand",
        ),
        migrations.DeleteModel(
            name="ProductBrand",
        ),
        migrations.RemoveField(
            model_name="category",
            name="seo_keyword",
        ),
        migrations.RemoveField(
            model_name="category",
            name="seo_keyword_de",
        ),
        migrations.RemoveField(
            model_name="category",
            name="seo_keyword_en",
        ),
        migrations.RemoveField(
            model_name="category",
            name="seo_keyword_nl",
        ),
        migrations.RemoveField(
            model_name="product",
            name="seo_keyword",
        ),
        migrations.RemoveField(
            model_name="product",
            name="seo_keyword_de",
        ),
        migrations.RemoveField(
            model_name="product",
            name="seo_keyword_en",
        ),
        migrations.RemoveField(
            model_name="product",
            name="seo_keyword_nl",
        ),
        migrations.AddField(
            model_name="category",
            name="meta_description",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes.",
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="meta_description_de",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes.",
                null=True,
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="meta_description_en",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes.",
                null=True,
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="meta_description_nl",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes.",
                null=True,
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="meta_description",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes. If left blank, then the HTML tags are stripped from the regular description field and this content is used.",
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="meta_description_de",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes. If left blank, then the HTML tags are stripped from the regular description field and this content is used.",
                null=True,
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="meta_description_en",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes. If left blank, then the HTML tags are stripped from the regular description field and this content is used.",
                null=True,
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="meta_description_nl",
            field=models.TextField(
                blank=True,
                help_text="If filled, populates the description meta tag for SEO purposes. If left blank, then the HTML tags are stripped from the regular description field and this content is used.",
                null=True,
                verbose_name="meta description",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="active",
            field=models.BooleanField(
                default=True,
                help_text="Inactive products do not show up on the site",
                verbose_name="active",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="slug",
            field=models.SlugField(max_length=200, unique=True, verbose_name="slug"),
        ),
        migrations.AlterField(
            model_name="product",
            name="slug_de",
            field=models.SlugField(
                max_length=200, null=True, unique=True, verbose_name="slug"
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="slug_en",
            field=models.SlugField(
                max_length=200, null=True, unique=True, verbose_name="slug"
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="slug_nl",
            field=models.SlugField(
                max_length=200, null=True, unique=True, verbose_name="slug"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="length_unit",
            field=models.CharField(
                choices=[("mm", "Milimetre"), ("cm", "Centimetre"), ("m", "Metre")],
                default="cm",
                max_length=10,
                verbose_name="length unit",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="weight_unit",
            field=models.CharField(
                choices=[("g", "Gram"), ("kg", "Kilogram")],
                default="g",
                max_length=10,
                verbose_name="weight unit",
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="slug",
            field=autoslug.fields.AutoSlugField(
                editable=True, populate_from="name", unique=True, verbose_name="slug"
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="slug_de",
            field=autoslug.fields.AutoSlugField(
                editable=True,
                null=True,
                populate_from="name",
                unique=True,
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="slug_en",
            field=autoslug.fields.AutoSlugField(
                editable=True,
                null=True,
                populate_from="name",
                unique=True,
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="slug_nl",
            field=autoslug.fields.AutoSlugField(
                editable=True,
                null=True,
                populate_from="name",
                unique=True,
                verbose_name="slug",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="historical_order",
            field=models.ForeignKey(
                blank=True,
                help_text="Order this payment was for, in case it was cancelled/aborted. You cannot set order and historical order at the same time.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="historical_payments",
                to="shop.order",
                verbose_name="historical order",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="order",
            field=models.OneToOneField(
                default=1,
                help_text="The order being paid by this payment.",
                on_delete=django.db.models.deletion.CASCADE,
                to="shop.order",
                verbose_name="order",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="payment",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("completed", "Completed"),
                    ("cancelled", "Cancelled"),
                ],
                default="pending",
                max_length=50,
                verbose_name="status",
            ),
        ),
        migrations.AlterField(
            model_name="cart",
            name="status",
            field=models.CharField(
                choices=[
                    ("open", "Open"),
                    ("processing", "Processing"),
                    ("closed", "Closed"),
                ],
                default="open",
                max_length=50,
                verbose_name="status",
            ),
        ),
        migrations.AlterField(
            model_name="cart",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="carts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="order",
            name="cart",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                to="shop.cart",
                verbose_name="shopping cart",
            ),
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("historical_order__isnull", False),
                    ("order__isnull", False),
                    _negated=True,
                ),
                name="order_or_historical_order",
            ),
        ),
        migrations.AlterField(
            model_name="order",
            name="reference",
            field=models.CharField(
                default=brouwers.shop.models.orders.get_order_reference,
                help_text="A unique order reference",
                max_length=16,
                unique=True,
                verbose_name="reference",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="payment",
            name="order_or_historical_order",
        ),
        migrations.AlterField(
            model_name="payment",
            name="order",
            field=models.OneToOneField(
                blank=True,
                help_text="The order being paid by this payment.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="shop.order",
                verbose_name="order",
            ),
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("historical_order__isnull", True), ("order__isnull", False)
                    ),
                    models.Q(
                        ("historical_order__isnull", False), ("order__isnull", True)
                    ),
                    _connector="OR",
                ),
                name="order_or_historical_order",
            ),
        ),
        migrations.AddField(
            model_name="order",
            name="language",
            field=models.CharField(
                choices=[("nl", "Dutch"), ("en", "English"), ("de", "German")],
                default="nl",
                max_length=10,
                verbose_name="language",
            ),
        ),
        migrations.AddField(
            model_name="shopconfiguration",
            name="from_email",
            field=models.EmailField(
                blank=True,
                help_text="Email address for outgoing e-mails. This will end up in the 'From' header - you must ensure that your outgoing email server is appropriately configured. If left blank, the default value from the settings is used.",
                max_length=254,
                verbose_name="from email",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="related_products",
            field=models.ManyToManyField(blank=True, to="shop.product"),
        ),
        migrations.CreateModel(
            name="ShippingCost",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Descriptive label, e.g. 'enveloppe' or 'small package'.",
                        max_length=100,
                        verbose_name="label",
                    ),
                ),
                (
                    "country",
                    brouwers.general.fields.CountryField(
                        choices=[
                            ("N", "The Netherlands"),
                            ("B", "Belgium"),
                            ("D", "Germany"),
                        ],
                        help_text="Country to ship the order to.",
                        max_length=1,
                        verbose_name="country",
                    ),
                ),
                (
                    "max_weight",
                    models.PositiveSmallIntegerField(
                        help_text="Maximum weight (in grams) for orders to match this shipping cost.",
                        verbose_name="maximum weight",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Shipping cost for this weight limit, including VAT.",
                        max_digits=5,
                        verbose_name="price",
                    ),
                ),
            ],
            options={
                "verbose_name": "shipping cost",
                "verbose_name_plural": "shipping costs",
            },
        ),
        migrations.AddField(
            model_name="order",
            name="delivery_method",
            field=models.CharField(
                choices=[("pickup", "Pickup"), ("mail", "By mail")],
                default="mail",
                max_length=20,
                verbose_name="delivery method",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="order",
            name="shipping_costs",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                max_digits=6,
                null=True,
                verbose_name="shipping costs",
            ),
        ),
        migrations.AlterField(
            model_name="order",
            name="delivery_address",
            field=models.OneToOneField(
                blank=True,
                help_text="Address for delivery",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="delivery_order",
                to="shop.address",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("delivery_address__isnull", False), ("delivery_method", "mail")
                    ),
                    models.Q(("delivery_method", "mail"), _negated=True),
                    _connector="OR",
                ),
                name="delivery_address_when_shipping",
                violation_error_message="A delivery address must be specified when deliverying via mail.",
            ),
        ),
        migrations.AddConstraint(
            model_name="shippingcost",
            constraint=models.UniqueConstraint(
                fields=("country", "max_weight"), name="unique_ranges"
            ),
        ),
    ]
