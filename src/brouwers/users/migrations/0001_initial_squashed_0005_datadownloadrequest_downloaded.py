# Generated by Django 4.2.19 on 2025-04-14 21:29

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import brouwers.utils.storages


class Migration(migrations.Migration):
    replaces = [
        ("users", "0001_initial"),
        ("users", "0002_auto_20150530_2311"),
        ("users", "0003_auto_20160226_0852"),
        ("users", "0004_datadownloadrequest"),
        ("users", "0005_datadownloadrequest_downloaded"),
    ]

    dependencies = [
        ("auth", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Required. 30 characters or fewer. All characters allowed.",
                        max_length=30,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "username_clean",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="cleaned username"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "forumuser_id",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="forum user id"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["username_clean"],
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="DataDownloadRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "finished",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="finished"
                    ),
                ),
                (
                    "zip_file",
                    models.FileField(
                        blank=True,
                        storage=brouwers.utils.storages.PrivateMediaFileSystemStorage(),
                        upload_to="",
                        verbose_name="zip file",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "downloaded",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="downloaded"
                    ),
                ),
            ],
        ),
    ]
