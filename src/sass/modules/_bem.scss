////
/// Microscope(-sass) BEM library.
/// @group bem
////

/// @name Import BEM library.
/// @example @import '~microscope-sass/lib/bem';

//
// Library to build BEM (block-element-modifier) classnames, with the strict
// interpretation.
//
// BEM class names in SASS can become unreadable for complex combinations, and often
// the composed sass rules do not output specific enough selectors.
//
// These mixins help you in preventing output like:
//
//   `.block--modifier {...}`
//   `.block__element` {...}`
//
// Instead, the correct output is generated:
//
//   `.block.block--modifier {...}`
//   `.block .block__element {...}`

@use 'sass:list' as list;
@use 'sass:string' as string;
@use 'sass:selector' as selector;

/// Split a string on separator
///
/// Taken from https://stackoverflow.com/a/42295154
///
/// @access private
/// @param {string} $string - The string to split
/// @param {string} $separator - The separator to split on
@function _str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index: string.index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: string.slice($string, 1, $index - 1);
    // push item to array
    $split-arr: list.append($split-arr, $item);
    // remove item and separator from string
    $string: string.slice($string, $index + 1);
    // find new index of separator
    $index: string.index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: list.append($split-arr, $string);

  @return $split-arr;
}

/// Output rules for elements within a block.
///
/// Ensures the specific `.block .block__element` selector.
///
/// @param {string} $element - The element name within the block.
/// @content The style rules are applied to the block element.
/// @example scss - Usage
///   .my-block {
///     @element('some-element') {
///       display: inline-block;
///     }
///   }
/// @example css - Output
///   .my-block .my-block__some-element {display: inline-block;}
@mixin element($element) {
  // capture the block, even if there is a modifier on the block
  $block: nth(simple-selectors(&), 1);
  $selector: '#{&} #{$block}__#{$element}';
  @at-root #{$selector} {
    @content;
  }
}

/// Apply a modifier to a block or element.
///
/// @param {string} $modifier - The name of the modifier to apply.
/// @content The style rules are applied to the block or element modifier.
/// @example scss - Usage
///   .my-block {
///     @element('some-element') {
///       @modifier('focus') {
///         background: fuchsia;
///       }
///     }
///
///     @modifier('modified') {
///       border: solid 3px yellow;
///     }
///   }
/// @example css - Output
///   .my-block .my-block__some-element.my-block__some-element--focus {background: fuchsia;}
///   .my-block.my-block--modified {border: solid 3px yellow;}
@mixin modifier($modifier) {
  $selector: null;

  // we grab the _first_ selector list item - & can refer to multiple, but that's very
  // un-bem like and unsupported here.
  $target: list.nth(&, 1);
  $bits: _str-split(string.quote(#{$target}), ' ');

  @if (length($bits) == 1) {
    // block
    $selector: selector.append(&, '#{&}--#{$modifier}');
  } @else {
    // block__element
    $block: list.nth($bits, 1); // block, possibly with a modifier
    $element: list.nth($bits, 2);
    $element_with_modifier: selector.append($element, '#{$element}--#{$modifier}');
    $selector: '#{$block} #{$element_with_modifier}';
  }

  @at-root #{$selector} {
    @content;
  }
}
